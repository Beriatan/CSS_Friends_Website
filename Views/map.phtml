<!-- https://harrywood.co.uk/maps/examples/openlayers/marker-popups.html -->

<div id="Map Wrapper" class="d-flex align-content-start flex-wrap">
<div id="mapdiv" class="col-12 col-md-8 col-lg-8 col-xl-8 col-xxl-8" style="height:600px"></div>
<script src="OpenLayers-2.13.1/OpenLayers.js"></script>
<!-- download the library here: https://openlayers.org/two/ -->

<script>
        map = new OpenLayers.Map("mapdiv");
        mainLayer = new OpenLayers.Layer.OSM()
        map.addLayer(mainLayer);

        epsg4326 =  new OpenLayers.Projection("EPSG:4326"); //WGS 1984 projection
        projectTo = map.getProjectionObject(); //The map projection (Spherical Mercator)

        var lonLat = new OpenLayers.LonLat( userLon ,userLat ).transform(epsg4326, projectTo);

        var zoom= 2;
        map.setCenter (lonLat, zoom);

        var vectorLayer = new OpenLayers.Layer.Vector("Overlay");


        var friends = "";
        retrieveFriendsData();
        setInterval(retrieveFriendsData, 10000);

        map.addLayer(vectorLayer);
        //Add a selector control to the vectorLayer with popup functions
        var controls = {
            selector: new OpenLayers.Control.SelectFeature(vectorLayer, { onSelect: createPopup, onUnselect: destroyPopup })
        };


        /**
         * Fetches friends from the database, converts results to Json,
         * and calls the method to load friend markers on the screen
         */
        function retrieveFriendsData() {
            fetch("ajaxGetFriends.php", {
                method: 'GET'
            })
                .then(res => res.json())
                .then(data => {
                    loadMarkers(data);
                })
                .catch((error) => {
                    console.error("Error: " , error);
                });
        }

        /**
         * Load all markers on the map from given json data
         * */
        function loadMarkers(data){
            //Check if received data about the friends is already the same as the one stored on the map
            if(friends != data){
                //Remove all existing markers
                vectorLayer.destroyFeatures();
                friends = data;

                //Create a marker for each friend
                for (var i = 0; i < friends.length; i++) {
                    var f = friends[i];
                    addMarker(f._longitude, f._latitude, f._photo, f._firstname, f._lastname);
                }
            }
        }

        /**
         * Calculates the distance between given point and logged in user
         * @param lon longitude of given point
         * @param lat latitude of given point
         * @param userLon user's longitude
         * @param userLat user's latitude
         * @returns {number} distance in km, integer form
         */
        function calculateDistance(lon, lat, userLon, userLat) {

            const R = 6371e3; // radius of the Earth in metres
            const userLatRad = userLat * Math.PI/180; // φ, λ in radians
            const latRad = lat * Math.PI/180;
            const latDifRad = (lat-userLat) * Math.PI/180;
            const lonDifRad = (lon-userLon) * Math.PI/180;

            const a = Math.sin(latDifRad/2) * Math.sin(latDifRad/2) +
                Math.cos(userLatRad) * Math.cos(latRad) *
                Math.sin(lonDifRad/2) * Math.sin(lonDifRad/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

            const dist = R * c; // in metres
            return parseInt(dist/1000);
        }

        /**
         * Adds an individual marker on the map for an individual user
         * @param lon - longitude
         * @param lat - latitude
         * @param photourl - user's photo address
         * @param firstName - user's first name
         * @param lastName - user's last name
         */
        function addMarker(lon, lat, photourl, firstName, lastName){
            // Define markers as "features" of the vector layer:
            var feature = new OpenLayers.Feature.Vector(
                new OpenLayers.Geometry.Point( lon, lat ).transform(epsg4326, projectTo),
                {description:

                    '<div class="list-group-item d-flex justify-content-between align-items-center container-f" style=" background-color: white;"> ' +
                        '<a class="text-decoration-none text-black" href="index.php?searchField='+ firstName +'">' +
                        '<span><img class="img-fluid rounded me-3" style="width:100px" src="'+ photourl +'"></span>' +
                        '<span class="ms-1">' + firstName + ' '+ lastName + '</span>' +
                        '<span></span>' +
                        '<span class="ms-1"> Distance:  </span>' +
                        '<span class="badge bg-success rounded-pill ms-1" id="distance">' + calculateDistance(lon, lat, userLon, userLat) + 'km' +'</span>' +
                    '</a></div>'
                } ,
                {externalGraphic: ''+ photourl + '', graphicHeight: 30, graphicWidth: 30, graphicXOffset:-12, graphicYOffset:-25  }
            );
            vectorLayer.addFeatures(feature);
        }


        /**
         * Event listener for map movement.
         * After movement is complete, it reads which markers are visible on the screen
         * And prints them in the friendsList element on the screen.
         */
        map.events.register("moveend", map, function(evt) {
            var extent = map.getExtent();
            var friendListContainer = document.getElementById('friendsList');
            //Empty the friend list to prepare it for the new items
            removeAllChildNodes(friendListContainer);
            for (var i = 0, l = vectorLayer.features.length; i < l; i++) {
                var feature = vectorLayer.features[i];
                if (extent.intersectsBounds(feature.geometry.getBounds())) {
                  console.log(feature.data.description);
                  //Create a new list item
                  var newListItem = document.createElement('li');
                  //Set its bootstrap class
                  //Set its inner text
                  newListItem.innerHTML =  feature.data.description;
                  friendListContainer.appendChild(newListItem);

                }
            }
        });

        /**
            Create a small window with user details when clicked
         */
        function createPopup(feature) {
            feature.popup = new OpenLayers.Popup.FramedCloud("pop",
                feature.geometry.getBounds().getCenterLonLat(),
                null,
                '<div class="markerContent">'+feature.attributes.description+'</div>',
                null,
                true,
                function() { controls['selector'].unselectAll(); }
            );
            //feature.popup.closeOnMove = true;
            map.addPopup(feature.popup);
        }
        /**
         * Removes focused user window when unclicked
         * */
        function destroyPopup(feature) {
            feature.popup.destroy();
            feature.popup = null;
        }
        map.addControl(controls['selector']);
        controls['selector'].activate();



</script>
<style>
    #friendsList{height:600px; width:100%;}
    #friendsList{overflow:hidden; overflow-y:scroll;}
</style>

    <!--Container for friends displayed on the map-->
<div id="FriendList" class="col-12 col-md-4 col-lg-4 col-xl-4 col-xxl-4" style=" height:600px;border:1px solid green;background-color: white;">

        <ul id="friendsList" class="list-group"> </ul>
</div>
</div>

